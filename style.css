 </style>
</head>
<body>

    <header>
        <nav>
            <a href="index.html">Home</a>
            <a href="services.html">Services</a>
            <a href="gallery.html">Gallery</a>
            <a href="contact.html">Contact</a>
        </nav>
    </header>

    <section class="hero">
        <canvas id="robotCanvas" class="hero-canvas"></canvas>
        <div class="overlay">
            <h1>ZSN Engineering</h1>
            <p class="tagline">Innovate • Create • Deliver</p>
            <p class="est">Est. 2022</p>
        </div>
    </section>

    <footer>
        <p>© 2022 ZSN Engineering | All rights reserved.</p>
    </footer>

    <!-- Three.js Library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

    <script>
        window.onload = function() {
            // Scene setup
            const scene = new THREE.Scene();
            const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            const renderer = new THREE.WebGLRenderer({ canvas: document.getElementById('robotCanvas'), antialias: true, alpha: true });
            renderer.setSize(window.innerWidth, window.innerHeight);

            // Robot components
            const bodyGeometry = new THREE.BoxGeometry(1, 1.5, 0.5);
            const bodyMaterial = new THREE.MeshStandardMaterial({ color: 0x0077b6 });
            const body = new THREE.Mesh(bodyGeometry, bodyMaterial);
            scene.add(body);

            const headGeometry = new THREE.BoxGeometry(0.8, 0.8, 0.8);
            const headMaterial = new THREE.MeshStandardMaterial({ color: 0x00b4d8 });
            const head = new THREE.Mesh(headGeometry, headMaterial);
            head.position.y = 1.2;
            scene.add(head);

            const eyeGeometry = new THREE.BoxGeometry(0.1, 0.1, 0.1);
            const eyeMaterial = new THREE.MeshStandardMaterial({ color: 0x000000 });

            const leftEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
            leftEye.position.set(-0.2, 1.3, 0.4);
            scene.add(leftEye);

            const rightEye = new THREE.Mesh(eyeGeometry, eyeMaterial);
            rightEye.position.set(0.2, 1.3, 0.4);
            scene.add(rightEye);


            const armGeometry = new THREE.BoxGeometry(0.3, 1, 0.3);
            const armMaterial = new THREE.MeshStandardMaterial({ color: 0x90e0ef });

            const leftArm = new THREE.Mesh(armGeometry, armMaterial);
            leftArm.position.x = -0.65;
            leftArm.position.y = 0.25;
            scene.add(leftArm);

            const rightArm = new THREE.Mesh(armGeometry, armMaterial);
            rightArm.position.x = 0.65;
            rightArm.position.y = 0.25;
            scene.add(rightArm);

            // Add lighting
            const ambientLight = new THREE.AmbientLight(0x404040, 5);
            scene.add(ambientLight);
            const directionalLight = new THREE.DirectionalLight(0xffffff, 2);
            directionalLight.position.set(1, 1, 1);
            scene.add(directionalLight);

            camera.position.z = 5;

            // Animation loop
            let waveDirection = 1;
            function animate() {
                requestAnimationFrame(animate);

                // Simple waving motion for the right arm
                rightArm.rotation.x += 0.05 * waveDirection;
                if (rightArm.rotation.x > Math.PI / 4 || rightArm.rotation.x < -Math.PI / 4) {
                    waveDirection *= -1; // Reverse direction
                }
                
                renderer.render(scene, camera);
            }
            animate();

            // Handle window resizing
            window.addEventListener('resize', () => {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            });
        };
    </script>
</body>
</html>
